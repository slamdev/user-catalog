import java.nio.file.Files
import java.nio.file.Paths

import static java.lang.System.getenv
import static java.nio.file.FileSystems.newFileSystem
import static java.nio.file.StandardOpenOption.TRUNCATE_EXISTING

plugins {
    id 'java'
    id 'idea'
    id 'findbugs'
    id 'pmd'
    id 'checkstyle'
    id 'jacoco'
    id 'com.gorylenko.gradle-git-properties' version '1.4.17'
    id 'org.hidetake.ssh' version '2.4.2'
}

apply plugin: 'propdeps'
apply plugin: 'propdeps-idea'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.slamdev.catalog.plugin.EC2-plugin'

apply from: '../gradle/validation.gradle'
apply from: '../gradle/coverage.gradle'
apply from: '../gradle/deploy.gradle'
apply from: '../gradle/extendedTests.gradle'

sourceCompatibility = 1.8

ext {
    deployHost = { ec2Instances.findAll(['tag': ['service']])*.publicDnsName }
    springProfiles = ['postgres']
    PG_URL = getenv('PG_URL') ?: project.PG_URL
    PG_USER = getenv('PG_USER') ?: project.PG_USER
    PG_PASSWORD = getenv('PG_PASSWORD') ?: project.PG_PASSWORD
}

gitProperties {
    keys = [
            'git.branch', 'git.commit.id', 'git.commit.id.abbrev', 'git.commit.user.name',
            'git.commit.user.email', 'git.commit.message.short', 'git.commit.message.full', 'git.commit.time'
    ]
}

task defineAdminUrl << {
    def adminServerUrl = ec2Instances.findOne(['tag': ['admin']]).publicDnsName
    try {
        newFileSystem(Paths.get("${jar.archivePath}"), null).withCloseable {
            java.nio.file.Path file = it.getPath('/BOOT-INF/classes/application.properties')
            List<String> lines = Files.readAllLines(file).collect {
                it.startsWith('externalAdminHost') ? "externalAdminHost=$adminServerUrl" : it
            }
            Files.write(file, lines, TRUNCATE_EXISTING);
        }
    } catch (IOException e) {
        logger.error('', e)
    }
}
remoteDeploy.dependsOn defineAdminUrl

processResources {
    filesMatching('**/application*.properties') {
        expand(project.properties + project.rootProject.properties)
    }
}

repositories {
    mavenLocal()
    maven {
        url "http://dl.bintray.com/slamdev/maven"
    }
    jcenter()
    mavenCentral()
}

dependencies {
    compile 'io.springfox:springfox-swagger2:2.5.0'
    compile 'io.springfox:springfox-swagger-ui:2.5.0'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-hateoas'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'de.codecentric:spring-boot-admin-starter-client:1.4.0'
    runtime 'com.h2database:h2'
    runtime 'org.postgresql:postgresql:9.4.1209.jre7'
    compile 'com.jayway.jsonpath:json-path'
    compile 'org.atteo:evo-inflector:1.2.1'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    compile 'org.projectlombok:lombok:1.16.10'
    optional 'org.springframework.boot:spring-boot-configuration-processor'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
}
